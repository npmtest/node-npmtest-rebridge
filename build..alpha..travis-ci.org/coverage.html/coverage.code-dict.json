{"/home/travis/build/npmtest/node-npmtest-rebridge/test.js":"/* istanbul instrument in package npmtest_rebridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rebridge/lib.npmtest_rebridge.js":"/* istanbul instrument in package npmtest_rebridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rebridge = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rebridge = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rebridge/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rebridge && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rebridge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rebridge\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rebridge.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rebridge.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rebridge.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rebridge.__dirname + '/lib.npmtest_rebridge.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rebridge/node_modules/rebridge/index.js":"\"use strict\";\n\nconst assert = require(\"assert\");\nconst deasync = require(\"deasync\");\nconst Redlock = require(\"redlock\");\n\nfunction awaitPromise(p) {\n\tlet done = false;\n\tlet ret;\n\tlet err;\n\tp.then(arg => {\n\t\tdone = true;\n\t\tret = arg;\n\t})\n\t.catch(e => {\n\t\tdone = true;\n\t\terr = e;\n\t});\n\tdeasync.loopWhile(() => !done);\n\tif (err) throw err;\n\treturn ret;\n}\n\nfunction promisableGet(opt, rootKey, permissive = false) {\n\treturn new Promise(\n\t\t(resolve, reject) => opt.redis.hget(opt.namespace, rootKey, (err, json) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tif (permissive && json === \"undefined\") return undefined;\n\t\t\t\tresolve(JSON.parse(json) || {});\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t})\n\t);\n}\n\nfunction promisableSet(opt, key, val) {\n\tassert.notStrictEqual(typeof val, \"undefined\");\n\tlet json = JSON.stringify(val);\n\ttry {\n\t\tJSON.parse(json);\n\t} catch (e) {\n\t\tjson = \"{}\";\n\t}\n\treturn new Promise(\n\t\t(resolve, reject) => opt.redis.hset(opt.namespace, key, json, err => {\n\t\t\tif (err)\n\t\t\t\treject(err);\n\t\t\telse\n\t\t\t\tresolve();\n\t\t})\n\t);\n}\n\nfunction promisableModify(opt, rootKey, tree, fun) {\n\t// Yes, it's ugly, but it's needed to keep variables around\n\treturn opt.redlock.lock(rootKey, opt.lockTTL)\n\t\t.then(lock => promisableGet(opt, rootKey)\n\t\t\t.then(rootVal => nestedApply(rootVal, tree, fun))\n\t\t\t.then(({newObj, ret}) => promisableSet(opt, rootKey, newObj)\n\t\t\t\t.then(() => lock.unlock())\n\t\t\t\t.then(() => ret)\n\t\t)\n\t);\n}\n\n// Abstracted version of http://stackoverflow.com/a/18937118.\n// Note: this _does not work_ with nested set\nfunction nestedApply(obj, path, fun) {\n\tif (path.length === 0) {\n\t\tconst _ret = fun(obj);\n\t\treturn {\n\t\t\tret: _ret,\n\t\t\tnewObj: obj\n\t\t};\n\t}\n\t// https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n\tlet newObj = obj;\n\tconst last = path.pop();\n\tfor (const elem of path) {\n\t\tif (!newObj[elem])\n\t\t\tnewObj[elem] = {};\n\t\tnewObj = newObj[elem];\n\t}\n\tconst ret = fun(newObj[last]);\n\treturn {\n\t\tret,\n\t\tnewObj\n\t};\n}\n\nfunction nestedSet(obj, path, value) {\n\tassert.notStrictEqual(typeof value, \"undefined\");\n\tlet newObj = obj;\n\tconst last = path.pop();\n\tfor (const elem of path) {\n\t\tif (!newObj[elem])\n\t\t\tnewObj[elem] = {};\n\t\tnewObj = newObj[elem];\n\t}\n\n\treturn (newObj[last] = value);\n}\n\n/* Gets a \"root value\" from Redis (i.e. one stored in a Redis hash),\n * deserializes it from JSON, and returns a promise.\n * Also contains a \"tree\" property, which is used when navigating the\n * deserialized object.\n */\nfunction RedisWrapper(opt, key) {\n\treturn {\n\t\t_promise: new Promise(\n\t\t\t(resolve, reject) => opt.redis.hget(\n\t\t\t\topt.namespace,\n\t\t\t\tkey,\n\t\t\t\t(err, json) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst val = JSON.parse(json);\n\t\t\t\t\t\tresolve(val);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t),\n\t\t\t[]\n\t\t),\n\t\ttree: []\n\t};\n}\n\nfunction ProxiedWrapper(opt, promise, rootKey) {\n\treturn new Proxy(\n\t\tpromise,\n\t\t{\n\t\t\tget: (obj, key) => {\n\t\t\t\t// _value value\n\t\t\t\tif (opt.deasynced && key === \"_value\") {\n\t\t\t\t\treturn awaitPromise(obj._promise.then(value => {\n\t\t\t\t\t\twhile (obj.tree.length > 0) {\n\t\t\t\t\t\t\tconst curKey = obj.tree.shift();\n\t\t\t\t\t\t\tvalue = value[curKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\t// _promise property\n\t\t\t\tif (!opt.deasynced && key === \"_promise\") {\n\t\t\t\t\treturn obj._promise.then(value => {\n\t\t\t\t\t\twhile (obj.tree.length > 0) {\n\t\t\t\t\t\t\tconst curKey = obj.tree.shift();\n\t\t\t\t\t\t\tvalue = value[curKey];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// Standard stuff\n\t\t\t\tif (typeof key === \"symbol\" || key === \"inspect\" || key in obj)\n\t\t\t\t\treturn obj[key];\n\t\t\t\t// .set special Promise\n\t\t\t\tif (!opt.deasynced && key === \"set\") {\n\t\t\t\t\treturn val => promisableGet(opt, rootKey, true)\n\t\t\t\t\t\t.then(rootValue => {\n\t\t\t\t\t\t\tlet ret;\n\t\t\t\t\t\t\tif (obj.tree.length > 0) {\n\t\t\t\t\t\t\t\tret = nestedSet(rootValue, obj.tree, val);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tret = (rootValue = val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn promisableSet(opt, rootKey, rootValue).then(() => ret);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// .delete special Promise\n\t\t\t\tif (!opt.deasynced && key === \"delete\")\n\t\t\t\t\treturn prop => promisableModify(opt, rootKey, obj.tree, item => delete item[prop]);\n\t\t\t\t// .in special Promise\n\t\t\t\tif (!opt.deasynced && key === \"in\")\n\t\t\t\t\treturn prop => promisableModify(opt, rootKey, obj.tree, item => prop in item);\n\n\t\t\t\tconst forceFunc = /^__func_/.test(key);\n\t\t\t\tconst forceProp = /^__prop_/.test(key);\n\t\t\t\t/*\n\t\t\t\tThis is complex, but rather elegant.\n\t\t\t\tIf the user is calling an Array method (eg. push), it returns a promise.\n\t\t\t\tThis promise walks the `rootKey` object using `obj.tree` as a path, and\n\t\t\t\tapplies the given function passing the same arguments.\n\n\t\t\t\t\t| Eg. if `key` is `\"push\"` and `rootKey` is\n\t\t\t\t\t|\n\t\t\t\t\t|     {\n\t\t\t\t\t|         a: {\n\t\t\t\t\t|             b: {\n\t\t\t\t\t|                 c: [1]\n\t\t\t\t\t|             }\n\t\t\t\t\t|         }\n\t\t\t\t\t|     }\n\t\t\t\t\t|\n\t\t\t\t\t| and `obj.tree` is `[\"a\", \"b\", \"c\"]`, it will return a function\n\t\t\t\t\t| that navigates the object until `a.b.c` (i.e. `[1]`), and will\n\t\t\t\t\t| call\n\t\t\t\t\t|\n\t\t\t\t\t|     item => item[\"push\"].apply(item, arguments)\n\t\t\t\t\t|\n\t\t\t\t\t| on that. So, when the function is actually executed (eg.\n\t\t\t\t\t| `db.foo.a.b.c.push(10)`), it will call `item => item.push(10)`.\n\t\t\t\t */\n\t\t\t\tif (forceFunc || (!forceProp && key in Array.prototype)) {\n\t\t\t\t\tif (forceFunc)\n\t\t\t\t\t\tkey = key.replace(/^__func_/i, \"\");\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tconst promise = promisableModify(opt, rootKey, obj.tree, item => item[key].apply(item, arguments));\n\t\t\t\t\t\tif (opt.deasynced)\n\t\t\t\t\t\t\treturn awaitPromise(promise);\n\t\t\t\t\t\treturn promise;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (forceProp)\n\t\t\t\t\tkey = key.replace(/^__prop_/i, \"\");\n\t\t\t\tobj.tree.push(key);\n\t\t\t\treturn new ProxiedWrapper(opt, obj, rootKey);\n\t\t\t},\n\t\t\tset: (obj, prop, val) => {\n\t\t\t\tif (!opt.deasynced)\n\t\t\t\t\tthrow new Error(\"Can't assign values to Rebridge objects, use the .set() Promise instead\");\n\t\t\t\tobj.tree.push(prop);\n\t\t\t\tawaitPromise(promisableGet(opt, rootKey, true)\n\t\t\t\t\t.then(rootValue => {\n\t\t\t\t\t\tif (obj.tree.length > 0) {\n\t\t\t\t\t\t\tnestedSet(rootValue, obj.tree, val);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trootValue = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpromisableSet(opt, rootKey, rootValue);\n\t\t\t\t\t}));\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\thas: (obj, prop) => {\n\t\t\t\tif (!opt.deasynced)\n\t\t\t\t\tthrow new Error(\"The `in` operator isn't supported for Rebridge objects, use the .in() Promise instead.\");\n\t\t\t\treturn awaitPromise(promisableModify(opt, rootKey, obj.tree, item => prop in item));\n\t\t\t},\n\t\t\tdeleteProperty: (obj, prop) => {\n\t\t\t\tif (!opt.deasynced)\n\t\t\t\t\tthrow new Error(\"The `delete` operator isn't supported for Rebridge objects, use the .delete() Promise instead\");\n\t\t\t\tawaitPromise(promisableModify(opt, rootKey, obj.tree, item => delete item[prop]));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t);\n}\n\nfunction RootProxiedWrapper(opt, targetObj) {\n\treturn new Proxy(\n\t\ttargetObj,\n\t\t{\n\t\t\tget: (obj, key) => {\n\t\t\t\tif (key in obj) {\n\t\t\t\t\treturn obj[key];\n\t\t\t\t}\n\t\t\t\tassert.deepEqual(typeof key, \"string\");\n\t\t\t\tif (key === \"set\")\n\t\t\t\t\tthrow new Error(\"You can't call .set on the root object. Syntax: db.foo.set(bar)\");\n\t\t\t\tif (!opt.deasynced && key === \"in\")\n\t\t\t\t\treturn key => new Promise(\n\t\t\t\t\t\t(resolve, reject) => opt.redis.hexists(\n\t\t\t\t\t\t\topt.namespace,\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t(err, val) => {\n\t\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tresolve(val === 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\tif (key === \"delete\")\n\t\t\t\t\treturn key => new Promise(\n\t\t\t\t\t\t(resolve, reject) => opt.redis.hdel(\n\t\t\t\t\t\t\topt.namespace,\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\t\tif (err)\n\t\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\treturn new ProxiedWrapper(opt, new RedisWrapper(opt, key), key);\n\t\t\t},\n\t\t\tset: (target, prop, val) => {\n\t\t\t\tif (!opt.deasynced)\n\t\t\t\t\tthrow new Error(\"Can't assign values to Rebridge objects, use the .set() Promise instead\");\n\t\t\t\tlet done = false;\n\t\t\t\tlet err = null;\n\t\t\t\topt.redis.hset(opt.namespace, prop, JSON.stringify(val), e => {\n\t\t\t\t\tdone = true;\n\t\t\t\t\terr = e;\n\t\t\t\t});\n\t\t\t\tdeasync.loopWhile(() => !done);\n\t\t\t\tif (err) throw err;\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\thas: (target, prop) => {\n\t\t\t\tif (!opt.deasynced)\n\t\t\t\t\tthrow new Error(\"The `in` operator isn't supported for Rebridge objects, use the .in() Promise instead\");\n\t\t\t\tlet done = false;\n\t\t\t\tlet err;\n\t\t\t\tlet ret;\n\t\t\t\topt.redis.hexists(opt.namespace, prop, (e, val) => {\n\t\t\t\t\tdone = true;\n\t\t\t\t\terr = e;\n\t\t\t\t\tret = val;\n\t\t\t\t});\n\t\t\t\tdeasync.loopWhile(() => !done);\n\t\t\t\tif (err) throw err;\n\t\t\t\treturn ret;\n\t\t\t},\n\t\t\tdeleteProperty: (target, prop) => {\n\t\t\t\tif (!opt.deasynced)\n\t\t\t\t\tthrow new Error(\"The `delete` operator isn't supported for Rebridge objects, use the .delete() Promise isntead\");\n\t\t\t\tlet done = false;\n\t\t\t\tlet err;\n\t\t\t\topt.redis.hdel(opt.namespace, prop, e => {\n\t\t\t\t\tdone = true;\n\t\t\t\t\terr = e;\n\t\t\t\t});\n\t\t\t\tdeasync.loopWhile(() => !done);\n\t\t\t\tif (err) throw err;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t);\n}\n\n// Catches \"reads\" of db.foo, and returns a wrapper around the deserialized value from Redis.\nclass Rebridge {\n\tconstructor(client, {\n\t\tlock = true,\n\t\tlockTTL = 1000,\n\t\tclients = [client],\n\t\tmode = \"promise\",\n\t\tnamespace = \"rebridge\"\n\t} = {}) {\n\t\tconst deasynced = mode === \"deasync\";\n\t\tconst redis = client;\n\t\tlet redlock;\n\t\tif (lock)\n\t\t\tredlock = new Redlock(clients);\n\t\telse // Use a dummy lock\n\t\t\tredlock = {\n\t\t\t\tlock: () => Promise.resolve({\n\t\t\t\t\tunlock: () => Promise.resolve()\n\t\t\t\t})\n\t\t\t};\n\t\tconst opt = {\n\t\t\tdeasynced,\n\t\t\tredis,\n\t\t\tredlock,\n\t\t\tlockTTL,\n\t\t\tnamespace\n\t\t};\n\t\treturn new RootProxiedWrapper(opt, {});\n\t}\n}\n\nmodule.exports = Rebridge;","/home/travis/build/npmtest/node-npmtest-rebridge/node_modules/rebridge/.eslintrc.js":"module.exports = {\n    \"extends\": \"google\",\n    \"rules\": {\n        \"camelcase\": [1, {\n            \"properties\": \"never\"\n        }],\n        \"curly\": 0,\n        \"default-case\": 1,\n        \"eol-last\": 0,\n        \"indent\": [\"error\", \"tab\", {\"SwitchCase\": 1}],\n        \"max-len\": 0,\n        \"new-cap\": 1,\n        \"no-console\": 2,\n        \"no-extend-native\": 0,\n        \"no-loop-func\": 0,\n        \"no-return-assign\": 0,\n        \"no-unused-vars\": 1,\n        \"no-var\": 1,\n        \"prefer-const\": 1,\n        \"require-jsdoc\": 0,\n        \"linebreak-style\": 0\n    }\n};"}